// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/service/transcribe_service_mock.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	transcribeservice "github.com/aws/aws-sdk-go/service/transcribeservice"
	gomock "github.com/golang/mock/gomock"
)

// MockTranscribeServiceClient is a mock of TranscribeServiceClient interface.
type MockTranscribeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTranscribeServiceClientMockRecorder
}

// MockTranscribeServiceClientMockRecorder is the mock recorder for MockTranscribeServiceClient.
type MockTranscribeServiceClientMockRecorder struct {
	mock *MockTranscribeServiceClient
}

// NewMockTranscribeServiceClient creates a new mock instance.
func NewMockTranscribeServiceClient(ctrl *gomock.Controller) *MockTranscribeServiceClient {
	mock := &MockTranscribeServiceClient{ctrl: ctrl}
	mock.recorder = &MockTranscribeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscribeServiceClient) EXPECT() *MockTranscribeServiceClientMockRecorder {
	return m.recorder
}

// CreateVocabulary mocks base method.
func (m *MockTranscribeServiceClient) CreateVocabulary(input *transcribeservice.CreateVocabularyInput) (*transcribeservice.CreateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVocabulary", input)
	ret0, _ := ret[0].(*transcribeservice.CreateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVocabulary indicates an expected call of CreateVocabulary.
func (mr *MockTranscribeServiceClientMockRecorder) CreateVocabulary(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVocabulary", reflect.TypeOf((*MockTranscribeServiceClient)(nil).CreateVocabulary), input)
}

// GetVocabulary mocks base method.
func (m *MockTranscribeServiceClient) GetVocabulary(input *transcribeservice.GetVocabularyInput) (*transcribeservice.GetVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVocabulary", input)
	ret0, _ := ret[0].(*transcribeservice.GetVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVocabulary indicates an expected call of GetVocabulary.
func (mr *MockTranscribeServiceClientMockRecorder) GetVocabulary(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVocabulary", reflect.TypeOf((*MockTranscribeServiceClient)(nil).GetVocabulary), input)
}

// UpdateVocabulary mocks base method.
func (m *MockTranscribeServiceClient) UpdateVocabulary(input *transcribeservice.UpdateVocabularyInput) (*transcribeservice.UpdateVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVocabulary", input)
	ret0, _ := ret[0].(*transcribeservice.UpdateVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVocabulary indicates an expected call of UpdateVocabulary.
func (mr *MockTranscribeServiceClientMockRecorder) UpdateVocabulary(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVocabulary", reflect.TypeOf((*MockTranscribeServiceClient)(nil).UpdateVocabulary), input)
}
